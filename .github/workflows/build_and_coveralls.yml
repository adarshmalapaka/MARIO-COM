##############################################################################
#
# GitGub CI workflow syntax spec:
#    https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#
# Coveralls example:
#    https://github.com/marketplace/actions/coveralls-github-action
#
##############################################################################

name: Build and Test
on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]
jobs:
  build-and-test:
    runs-on: ubuntu-20.04
    steps:
      
      - name: Checking out
        uses: actions/checkout@v2.3.4
      
      - name: Building and testing
        uses: ichiro-its/ros2-ci@v1.0.0
        with:
          apt-packages: g++ cmake make git libgtk2.0-dev pkg-config libboost-all-dev ros-foxy-gazebo-* ros-foxy-cartographer ros-foxy-cartographer-ros ros-foxy-navigation2 ros-foxy-dynamixel-sdk ros-foxy-turtlebot3-msgs ros-foxy-turtlebot3
          external-repos: https://github.com/ROBOTIS-GIT/turtlebot3_manipulation.git 
      - name: OpenCV
        run: git clone https://github.com/opencv/opencv.git https://github.com/ROBOTIS-GIT/turtlebot3_manipulation#foxy-devel
      
      - name: install 1
        run: mkdir -p build && cd build
      
      - name: install 2
        run: cmake ../opencv

      - name: install 3
        run: make -j4

      - name: install 4
        run: sudo make install

# name: Build

# on:
#   # Triggered whenever push to the master branch
#   push:
#     branches: [ "master" ]

#   # Triggered whenever a pull request is created on master
#   pull_request:
#     branches: [ "master" ]
#     types: [opened]

#   # Allow manual trigger
#   workflow_dispatch:

# jobs:
#   build:
#     # Create a container of the latest Ubuntu, other values could be
#     # ubuntu-latest, ubuntu-22.04, etc.
#     runs-on: ubuntu-20.04
    
#     steps:
#       # We want to use GitHub CI checkout version 3 for checking out the branch
#       - uses: actions/checkout@v3
      
#       # Install some system packages
#       - name: Install packages
#         run: sudo apt install -y lcov
      
#       - name: ROS Foxy
#         # working-directory: ${{github.workspace}}/matplotplusplus
#         run: wget https://raw.githubusercontent.com/ROBOTIS-GIT/robotis_tools/master/install_ros2_foxy.sh

#       - name: Install 1
#         # working-directory: ${{github.workspace}}/matplotplusplus
#         run: sudo chmod 755 ./install_ros2_foxy.sh

#       - name: Install 2
#         # working-directory: ${{github.workspace}}/matplotplusplus/build
#         run: bash ./install_ros2_foxy.sh

#       - name: Gazebo
#         # working-directory: ${{github.workspace}}/matplotplusplus/build
#         run: sudo apt-get install ros-foxy-gazebo-*
      
#       - name: Install 1
#         # working-directory: ${{github.workspace}}/matplotplusplus/build
#         run: sudo apt install ros-foxy-cartographer

#       - name: Install 2
#         # working-directory: ${{github.workspace}}/NumCpp
#         run: sudo apt install ros-foxy-cartographer-ros

#       - name: Install 3
#         # working-directory: ${{github.workspace}}/NumCpp
#         run: sudo apt install ros-foxy-navigation2

#       - name: Install 4
#         # working-directory: ${{github.workspace}}/NumCpp/build
#         run: sudo apt install ros-foxy-nav2-bringup

#       - name: Install 5
#         # working-directory: ${{github.workspace}}/NumCpp/build
#         run: sudo apt install ros-foxy-dynamixel-sdk

#       - name: TurtleBot3
#         run: sudo apt install ros-foxy-turtlebot3-msgs

#       - name: Install 1
#         run: sudo apt install ros-foxy-turtlebot3

#       - name: OpenCV
#         run: sudo apt-get install libboost-all-dev

#       - name: Install Gnuplot
#         run: sudo apt-get install gnuplot

#       # Run CMake to setup compilation flags
#       - name: Configure Coverage CMake 
#         run: cmake -D COVERAGE=ON -D CMAKE_BUILD_TYPE=Debug -B ${{github.workspace}}/build 
      
#       # Compile and executables
#       - name: Build Coverage
#         working-directory: ${{github.workspace}}/build
#         run: make

#       # Run test suite and compute code coverage
#       - name: Run Test Coverage
#         working-directory: ${{github.workspace}}/build
#         run: make code_coverage
      
      # Upload coverage result to Coverage.io 
      - name: Upload result to Coveralls.io
        uses: coverallsapp/github-action@1.1.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{github.workspace}}/build/coverage.info.cleaned

